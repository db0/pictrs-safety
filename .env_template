# Set this to 1 to use a temporary sqlite DB (Recommended)
# Set this to 0 to use postgresql. If you do, you need to create the user and the database in advance
USE_SQLITE=1
# The apikey header all workers must use to be able to pop jobs
FEDIVERSE_SAFETY_WORKER_AUTH='abcdfeg123456'
# Where to store the images being checked temporarily
FEDIVERSE_SAFETY_IMGDIR='/tmp/images'
# Your postgres connection URI. Only relevant when USE_SQLITE=0
POSTGRES_URI="postgresql://pictrsafety:ThatSecretPGSQLPass@127.0.0.1/pictrsafety"
# Uncomment the below to set strings which will specify authorized pict-rs clients.
# Make sure the pict-rs client is using this string at their URL
# e.g. 'http://localhost:14051/api/v1/scan/__WELCOME_IN__'
# Note that the 'IPADDR' is reserved (see KNOWN_PICTRS_IPS below)
#KNOWN_PICTRS_IDS='["__WELCOME_IN__"]'
# Uncomment the below line to allow more IPs to use your pictrs-safety
# Use the special URL 'http://localhost:14051/api/v1/scan/IPADDR' to use IP address-based authentication
# Then set the allowed IPs below
# You do not need to add 'IPADDR' to KNOWN_PICTRS_IDS above as it's built-in
# Note than 127.0.0.1 is always allowed.
#KNOWN_PICTRS_IPS='["192.168.0.1"]'
# If this amount of images are waiting for scanning, start retuning "OK" for each new scan after that
# This will prevent pict-rs from rejecting each and every upload because your scanning workers crashed or something
# and the admin is AFK
SCAN_BYPASS_THRESHOLD=10